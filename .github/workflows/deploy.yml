name: deploy
on:
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  Pre_Build_Steps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Replace with your desired Python version
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH=$HOME/.local/bin:$PATH  # Add Poetry bin directory to PATH
          poetry --version
      - name: Install project dependencies
        run: |
          poetry install
          poetry run flake8 || exit 1
      - name: Run Django tests with coverage
        env:
          SECRET_KEY: example_secret_key
          GOOGLE_CLIENT_ID: example_google_client_id
          GOOGLE_SECRET: example_google_client_secret
        run: |
          poetry run coverage run --source='.' manage.py test # Test 실행.
          coverage_result=$(poetry run coverage report -m)
          mkdir -p docs
          echo "$coverage_result" > docs/coverage_status.md
          git add -A
          git config --global user.email "twicegoddessana1229@gmail.com"
          git config --global user.name "tgoddessana"
          git commit -am "auto-update coverage.md" # 커밋 메시지
          coverage_percent=$(echo "$coverage_result" | grep -oP '\d+\%')
          if [ "${coverage_percent%\%}" -lt 70 ]; then
            echo "Test coverage is less than 70%."
            exit 1
          fi
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Django tests failed."
            exit $exit_code
          fi
  Deploy_Docker_image_to_DockerHub:
    needs: Pre_Build_Steps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/crescendo-image
  Deploy_to_Oracle_Cloud_Infrastructure:
    needs: Deploy_Docker_image_to_DockerHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd app
            ./redeploy.sh
  Release_to_GitHub:
    needs: Deploy_to_Oracle_Cloud_Infrastructure
    name: Release_to_GitHub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    steps:
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.ACTION_TOKEN }}
      - name: Read coverage_status.md
        id: read_coverage
        uses: actions/checkout@v3
        run: |
          coverage_status=$(cat coverage_status.md)
          echo "::set-output name=coverage_status::$coverage_status"
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: |
            ${{ steps.tag_version.outputs.changelog }}
            ### Coverage Status
            ${{ steps.read_coverage.outputs.coverage_status }}
